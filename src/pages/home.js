import { useEffect, useState } from 'react'
import Head from 'next/head'
import Image from 'next/image'
import { Inter } from '@next/font/google'
import styles from '@/styles/Home.module.css'
import queryDatabase from '@/api/query-database'
import { parseProperties } from '@/utils/parse-properties'
import styled from 'styled-components'
const inter = Inter({ subsets: ['latin'] })

const { Client } = require('@notionhq/client');

const notion = new Client({ auth: process.env.NOTION_API_KEY });

const Container = styled.div`
  background-color: green;
  width: 100%;
  height: 100%;
`

const StyledTable = styled.table`
  border: border: 1px solid black;
`

export async function getStaticProps() {
  const pageDataFromNotion = await queryDatabase();
  
  
  const tableBlockId = '44b538a4-aff2-4991-b8a5-bc493b56c114';
  const tableResponse = await notion.blocks.children.list({
    block_id: tableBlockId,
    page_size: 50,
  });
  let tableRows = []

  for(const row of tableResponse.results) {
    const rowData = row.table_row.cells
    let rowText = []
    for(const column of rowData) {
      rowText.push(column[0]?.plain_text)
    }
    tableRows.push(rowText)
  }

  const databaseId = 'b6c54b27d63a413390b42f41cc9e2d78';
  const databaseResponse = await notion.databases.query({
    database_id: databaseId
  });
  
  return {
    props: {
      tableRows
    },
  };
}

export default function Home(props) {
  const { tableRows } = props
  const [data, setData] = useState([])
  useEffect(() => {
    setData(tableRows)
  })

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Container>
          Hello, this is the page that we can work here
          <table style={{ 
            border: '5px solid yellow',
            borderCollapse: 'collapse' 
          }}>
            {
              data && data.map((row, rowIndex) => {
                return <tr key={rowIndex}>
                  {
                    row.map((column, columnIndex) => {
                      return <td key={rowIndex * columnIndex} style={{
                        border: '5px solid yellow',
                        borderCollapse: 'collapse' 
                      }}>{column}</td>
                    })
                  }
                  </tr>
              })
            }
          </table>
        </Container>
      </main>
    </>
  )
}
